<?php
/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */
/**
 * Database_MovieDatabase Class definition
 *
 * PHP version 5
 *
 * @category Database
 * @package  Helioviewer
 * @author   Jeff Stys <jeff.stys@nasa.gov>
 * @author   Keith Hughitt <keith.hughitt@nasa.gov>
 * @license  http://www.mozilla.org/MPL/MPL-1.1.html Mozilla Public License 1.1
 * @link     http://launchpad.net/helioviewer.org
 */
/**
 * Provides methods for querying and storing movies generated by
 * Helioviewer.org
 *
 * @category Database
 * @package  Helioviewer
 * @author   Jeff Stys <jeff.stys@nasa.gov>
 * @author   Keith Hughitt <keith.hughitt@nasa.gov>
 * @license  http://www.mozilla.org/MPL/MPL-1.1.html Mozilla Public License 1.1
 * @link     http://launchpad.net/helioviewer.org
 */
class Database_MovieDatabase {

    private $_dbConnection;

    /**
     * Constructor
     *
     * @return void
     */
    public function __construct() {
        $this->_dbConnection = false;
    }

    /**
     * Create a connection to the database if one has not already been made.
     *
     * @return void
     */
    private function _dbConnect() {
        if ( $this->_dbConnection === false ) {
            include_once 'DbConnection.php';
            $this->_dbConnection = new Database_DbConnection();
        }
    }

    /**
     * Insert a new movie entry into the `movies` table and returns its
     * identifier.
     *
     * @return int  Identifier in the `movies` table or boolean false
     */
    public function insertMovie($startTime, $endTime, $imageScale, $roi,
        $maxFrames, $watermark, $layerString, $layerBitMask, $eventString,
        $eventsLabels, $scale, $scaleType, $scaleX, $scaleY, $numLayers,
        $queueNum, $frameRate, $movieLength) {

        $this->_dbConnect();

        $startTime = isoDateToMySQL($startTime);
        $endTime   = isoDateToMySQL($endTime);

        $sql = sprintf(
                   'INSERT INTO movies '
                 . 'SET '
                 .     'id '                . ' = NULL, '
                 .     'timestamp '         . ' = NULL, '
                 .     'reqStartDate '      . ' ="%s", '
                 .     'reqEndDate '        . ' ="%s", '
                 .     'imageScale '        . ' = %f, '
                 .     'regionOfInterest '  . ' = PolygonFromText("%s"), '
                 .     'maxFrames '         . ' = %d, '
                 .     'watermark '         . ' = %b, '
                 .     'dataSourceString '  . ' ="%s", '
                 .     'dataSourceBitMask ' . ' = %d, '
                 .     'eventSourceString ' . ' ="%s", '
                 .     'eventsLabels '      . ' = %b, '
                 .     'scale '             . ' = %b, '
                 .     'scaleType '         . ' ="%s",'
                 .     'scaleX '            . ' = %f, '
                 .     'scaleY '            . ' = %f, '
                 .     'numLayers '         . ' = %d, '
                 .     'queueNum '          . ' = %d, '
                 .     'frameRate '         . ' = %f, '
                 .     'movieLength '       . ' = %f, '
                 .     'startDate '         . ' = NULL, '
                 .     'endDate '           . ' = NULL, '
                 .     'numFrames '         . ' = NULL, '
                 .     'width '             . ' = NULL, '
                 .     'height '            . ' = NULL, '
                 .     'buildTimeStart '    . ' = NULL, '
                 .     'buildTimeEnd '      . ' = NULL;',
                 $this->_dbConnection->link->real_escape_string($startTime),
                 $this->_dbConnection->link->real_escape_string($endTime),
                 (float)$imageScale,
                 $this->_dbConnection->link->real_escape_string(
                    $roi ),
                 (int)$maxFrames,
                 (bool)$watermark,
                 $this->_dbConnection->link->real_escape_string($layerString),
                 bindec($this->_dbConnection->link->real_escape_string(
                    (binary)$layerBitMask ) ),
                 $this->_dbConnection->link->real_escape_string($eventString),
                 (bool)$eventsLabels,
                 (bool)$scale,
                 $this->_dbConnection->link->real_escape_string(
                    $scaleType ),
                 (float)$scaleX,
                 (float)$scaleY,
                 (int)$numLayers,
                 (int)$queueNum,
                 (float)$frameRate,
                 (float)$movieLength
               );

        try {
            $result = $this->_dbConnection->query($sql);
        }
        catch (Exception $e) {
            return false;
        }

        return $this->_dbConnection->getInsertId();
    }

    /**
     * Insert an entry into the `movieFormats` table.
     *
     * @param  int  $movieId  Identifier in the `movies` table
     * @param  int  $format   Movie format file extension
     *
     * @return int Identifier in the `movieFormats` table or boolean false
     */
    public function insertMovieFormat($movieId, $format) {
        $this->_dbConnect();

        $sql = sprintf(
                   'INSERT INTO movieFormats '
                 . 'SET '
                 .     'id '       . ' = NULL, '
                 .     'movieId '  . ' = %d, '
                 .     'format '   . ' ="%s", '
                 .     'status '   . ' = 0, '  // 0 = 'queued'
                 .     'procTime ' . ' = NULL;',
                 (int)$movieId,
                 $this->_dbConnection->link->real_escape_string($format)
               );
        try {
            $result = $this->_dbConnection->query($sql);
        }
        catch (Exception $e) {
            return false;
        }

        return $this->_dbConnection->getInsertId();
    }

    /**
     * Insert an entry into the `youtube` table to keep track of user-generated
     * movies shared to YouTube.
     *
     * @return int Identifier in `youtube` table or boolean false
     */
    public function insertYouTubeMovie($movieId, $title, $desc, $keywords,
        $share) {

        $this->_dbConnect();

        $sql = sprintf(
                   'INSERT INTO youtube '
                 . 'SET '
                 .     'id '          . ' = NULL, '
                 .     'movieId '     . ' = %d, '
                 .     'youtubeId '   . ' = NULL, '
                 .     'timestamp '   . ' = NULL, '
                 .     'title '       . ' ="%s", '
                 .     'description ' . ' ="%s", '
                 .     'keywords '    . ' ="%s", '
                 .     'shared '      . ' = %b;',
                 (int)$movieId,
                 $this->_dbConnection->link->real_escape_string($title),
                 $this->_dbConnection->link->real_escape_string($desc),
                 $this->_dbConnection->link->real_escape_string($keywords),
                 (bool)$share
               );
        try {
            $result = $this->_dbConnection->query($sql);
        }
        catch (Exception $e) {
            return false;
        }

        return $this->_dbConnection->getInsertId();
    }

    /**
     * Update an entry in the `youtube` entry to add the YouTube identifier
     * string after the upload completed successfully.
     *
     * @param  int  $movieId    Identifier in the `movies` table
     * @param  str  $youtubeId  YouTube identifier string
     *
     * @return boolean true or false
     */
    public function updateYouTubeMovie($movieId, $youtubeId) {
        $this->_dbConnect();

        $sql = sprintf(
                  'UPDATE youtube '
                . 'SET '
                .     'youtubeId = "%s" '
                . 'WHERE '
                .     'movieId = %d '
                . 'LIMIT 1;',
                $this->_dbConnection->link->real_escape_string($youtubeId),
                (int)$movieId
               );
        try {
            $result = $this->_dbConnection->query($sql);
        }
        catch (Exception $e) {
            return false;
        }

        return true;
    }

    /**
     * Fetch statistics from the `movies` table for the N most recently
     * generated movies.
     *
     * @param  int  $n  Number of movies
     *
     * @return array  Array of movie statistics or boolean false
     */
    public function getMovieStatistics($n=100) {
        $this->_dbConnect();

        $sql = sprintf(
                   'SELECT '
                 .     'numFrames, '
                 .     'width * height AS numPixels, '
                 .     'queueNum, '
                 .     'TIMESTAMPDIFF(SECOND, buildTimeStart, buildTimeEnd) '
                 .         'AS time '
                 .  'FROM movies '
                 .  'WHERE '
                 .     'TIMESTAMPDIFF(SECOND, buildTimeStart, buildTimeEnd) '
                 .         '> 0 '
                 .  'ORDER BY id DESC '
                 .  'LIMIT %d;',
                 (int)$n
               );
        try {
            $result = $this->_dbConnection->query($sql);
        }
        catch (Exception $e) {
            return false;
        }

        // Fetch result and store as column arrays instead of rows
        $stats = array(
            "numFrames" => array(),
            "numPixels" => array(),
            "queueNum"  => array(),
            "time"      => array()
        );
        while ( $row = $result->fetch_array(MYSQLI_ASSOC) ) {
            array_push($stats['numFrames'], $row['numFrames']);
            array_push($stats['numPixels'], $row['numPixels']);
            array_push($stats['queueNum'],  $row['queueNum']);
            array_push($stats['time'],      $row['time']);
        }

        return $stats;
    }

    /**
     * Get a list of movies recently shared on YouTube from a cache file
     * or from a live database query.
     *
     * @param int  $num    Number of movies to return
     * @param str  $since  ISO date
     * @param bool $force  Force reading from database instead of cache
     *
     * @return arr Array containing movieId, youtubeId, timestamp for each
     *             of the matched movies or boolean false.
     */
    public function getSharedVideos($num, $since, $force=false) {

        include_once 'src/Helper/DateTimeConversions.php';

        $cached = false;

        if ( HV_DISABLE_CACHE !== true || $force===false ) {
            include_once 'src/Helper/Serialize.php';

            $cachedir = 'api/MovieDatabse/getSharedvideos';
            $filename = urlencode($since.'_'.$num.'.cache');
            $filepath = $cachedir.'/'.$filename;

            $cache = new Helper_Serialize($cachedir,
                $filename, 90);

            // Read cache (and invalidate if older than
            // Helper_Serialize::_maxAgeSec)
            $videos = $cache->readCache(true);
            if ( $videos !== false ) {
                $cached = true;
            }
        }

        // Load data directly from the database
        if ( $cached !== true || $force===true ) {
            $this->_dbConnect();

            $date = isoDateToMySQL($since);

            $sql = sprintf(
                       'SELECT movieId, youtubeId, timestamp '
                     . 'FROM youtube '
                     . 'WHERE '
                     .     'shared=1 AND '
                     .     'youtubeId IS NOT NULL AND '
                     .     'timestamp > "%s" '
                     . 'ORDER BY id DESC '
                     . 'LIMIT %d;',
                     mysqli_real_escape_string($this->_dbConnection->link,
                        $since),
                     (int)$num
                   );
            try {
                $result = $this->_dbConnection->query($sql);
            }
            catch (Exception $e) {
                return false;
            }

            $videos = array();
            while ($row = $result->fetch_array(MYSQLI_ASSOC)) {
                array_push($videos, $row);
            }

            if ( HV_DISABLE_CACHE !== true ) {
                if ( $cache->writeCache($videos) ) {
                    $cached = true;
                }
            }
        }

        return $videos;
    }
}